////////////////////////////////////////////////////////////////////
// Generated by Imperial Ruby compiler
// Maxeler MaxJ kernel output
// command line: '-m mp3.rby'
// top-level block: 'Kernel2'
////////////////////////////////////////////////////////////////////
//
;

// Imports:
// standard imports:
import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelConfiguration;

// extra imports:

// user imports:

// class:
public class Kernel2Kernel extends Kernel {

  final DFEType dataType = dfeFloat(8, 24);

  public Kernel2Kernel (KernelParameters parameters) {
    super(parameters);


// begin user preamble{
// } end user preamble

 // Inputs -  
   DFEVar t5 = io.input("inp4", dataType);

 // Relations:

   // Output           Input(s)
   //----------------------------------------
   DFEVar t7 = inc            (t5                 );
   //----------------------------------------
   DFEVector<DFEVar> v_t10_t9 = sdpr2(t7);
   DFEVar t10 = v_t10_t9[0];
   DFEVar t9 = v_t10_t9[1];
   //----------------------------------------
   //----------------------------------------

 // Directions -  in ~ <out2,out2>

 // Wiring -  t5 ~ t10,t9

 // Outputs -  
      io.output("out3", t10, dataType);
      io.output("out4", t9, dataType);
// begin user postamble{
// } end user postamble


  } // end constructor
   private DFEVar pdsr2(DFEVar t0,DFEVar t1) {
      DFEVar counter = control.count.simpleCounter(MathUtils.bitsToAddress(2));
      return control.mux(counter, t0, t1);
   }
   private DFEVector<DFEVar> sdpr2(DFEVar t0) {
      DFEVar counter = control.count.simpleCounter(MathUtils.bitsToAddress(2));
      DFEVector<DFEVar> v = (new DFEVectorType(t0.getType(), 2).newInstance(this);
      if (counter === 0)
      { v[0] <== t0; v[1] <== constants.var(0); } 
      else
      { v[0] <== constants.var(0); v[1] <== t0; }
      return v;
    }
} // end class
////////////////////////////////////////////////////////////////////
